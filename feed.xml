<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cheraq.com</title>
    <description>Super experimental articles, knowledge sharing and whatever you expect a developer to write about.
</description>
    <link>http://cheraq.com/</link>
    <atom:link href="http://cheraq.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 19 Apr 2016 19:57:36 +0200</pubDate>
    <lastBuildDate>Tue, 19 Apr 2016 19:57:36 +0200</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>JS: The Power of Functions</title>
        <description>&lt;p&gt;In JS, function is the BOSS. It is the way to build classes (before ES6 it was the only way), 
defines scope, etc. ES6 changed this a bit, but still function is your most powerful tool in JS.&lt;/p&gt;

&lt;p&gt;In JS you can pass function as argument to another function, 
or you can return it as result. Here is an example that uses both.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function forEach ( arr ) {
    function action ( fn ) {
        for ( var i in arr ) {
            fn ( arr [ i ] );
        }
        return action;
    }
    return action;
}

var x =0;
forEach ( [ 1 , 2 , 3 ] ) ( function ( i ) {
    x+=i;
});
// x = 6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This function accepts an array as argument, then returns a function that 
accepts a function as arguments, and calls it for every item in array (with value as argument).&lt;/p&gt;

&lt;p&gt;Note that action function will return itself, means you can chain it and do as many loops as you want 
on the array with different functions.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Apr 2016 18:00:00 +0200</pubDate>
        <link>http://cheraq.com/js-fn-power</link>
        <guid isPermaLink="true">http://cheraq.com/js-fn-power</guid>
        
        
        <category>JS</category>
        
      </item>
    
      <item>
        <title>JavaScript and Framework selection dilemma</title>
        <description>&lt;p&gt;So you need a JavaScript framework for your next project and not sure what to use? Maybe React? Angular 
looks so promising (Google is behind it, and whatever they do is awesome)! What about Ember? Or just pure JS?&lt;/p&gt;

&lt;p&gt;Well the answer to this question isn’t that easy. But here is the formula:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you are just trying something to see if it works, then whatever that you are good at, should be the best. Once you build your first prototype and it worked, then you probably know exactly what you want to build so proceed to (2).&lt;/li&gt;
  &lt;li&gt;If you exactly know what you want to build, then determine main challenges and see which framework can help, use the one that needs less persuasion and hacks.&lt;/li&gt;
  &lt;li&gt;If you just want yo try something and also eager to learn something new, then pick the one that impress you more, because you have bumpy road ahead and only passion can keep pushing you forward.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And always remember that frameworks and tools are made for certain requirements which might not be your requirements. So the tool you finally pick will not 100% fit and it supposed to just help to solve part of the problem. The rest you should solve on your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One last thing, don’t be afraid of breaking things.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 19 Mar 2016 18:00:48 +0100</pubDate>
        <link>http://cheraq.com/js-framework-dilemma</link>
        <guid isPermaLink="true">http://cheraq.com/js-framework-dilemma</guid>
        
        
        <category>JS</category>
        
      </item>
    
  </channel>
</rss>
